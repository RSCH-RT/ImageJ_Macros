// ------------------------------------------------------------------------------------------------------
//  Sarah Bailey 17 Dec 2013
// ------------------------------------------------------------------------------------------------------
//   STEP 1 = Dialog & initialise images
//   STEP 2 = Find the ball bearings & their quadrant 
//   STEP 3 =  Profile Analysis
//   STEP 4 =  Calc distances
//   STEP 5 = Tidy interface - closing windows not required
//   STEP 6 = Output results & prompt to save file
//
//   MODIFICATION HISTORY:
//	only scale images that are 512 x 368 pixels
//	Previously named "EpidAnalysisFinal"
// 	Removed ImageJ calibration which  can affect some IJ installs
//	Results X,Y display rather than North South
//	At Coll 90, North (G) = X2, South (T) = X1, East (B) = Y1, West (A) = Y2
//	N,S,E,W to show X and Y correctly
//	dEastX and dWestX swapped around 23/04/14 due to Y1 & Y2 being incorrectly orientated in results. Line 161/162
// ------------------------------------------------------------------------------------------------------

// ---------------------------- global variables ------------------------------------------------
var pos1;   	//  can be seen (edited) by all functions in this macro
var pos2;  
var intX;
var intY;
var xNorth;
var yNorth;
var xSouth; 
var ySouth;
var xEast;
var yEast;
var xWest;
var yWest;
var xCentre;
var yCentre;
var myImageID;  // the scaled image
var myOriginalID;  
var myLinac;
var intEnergy;
var intSSD;
var strDateImage;

// ------------------------------------------------------------------------------------------------------
//		MAIN MACRO
// ------------------------------------------------------------------------------------------------------

macro "Find Points" {
// *************** STEP 1 ***************
// Show a dialog to user so that they know the macro is running, initialise images

	requires("1.47p");
	myLinac = getArgument() ;
	if(myLinac == "") {
		myLinac = "Select";
	}

	if (nImages != 0) {
	   exit("Oops, please close all images before running this macro! ");
	} 

	lstLinac = newArray("LA1","LA2","LA3","LA4","LA5", "LA6", "Red-A", "Red-B", "Select");		

	Dialog.create("Macro Opened");
	Dialog.addMessage("EPID QC Image Analysis");
	Dialog.addMessage("This is an automated process as folows:");
	Dialog.addMessage(" - the macro finds the 8 ball bearings and the centre marker of the phantom.");
	Dialog.addMessage(" - these can be adjusted manually when prompted.");
	Dialog.addMessage(" - results appear in the Log window");
	Dialog.addMessage("");	
	//Dialog.addMessage("Linac: "+myLinac);	
	//Dialog.addMessage("Select linac where images were obtained:");
	Dialog.addChoice("             Linac:", lstLinac,myLinac);

	Dialog.addMessage("                                    ***** Click OK to start ******");
	Dialog.show();

	myLinac = Dialog.getChoice();

   myDirectory = "G:\\Shared\\Oncology\\Physics\\Linac Field Analysis\\"+myLinac+"\\";
   call("ij.io.OpenDialog.setDefaultDirectory", myDirectory);
   call("ij.plugin.frame.Editor.setDefaultDirectory", myDirectory);

	print(myDirectory);

	strFile = File.openDialog("Select an Image");
	
	if (File.exists(strFile) != 1) {
	        exit("Oops, no file selected! ");
	}
	
	open(strFile);
	run("Enhance Contrast", "saturated=0.35"); //makes the image visible

	// removes any previous calibration - affects the X-ray field results
	run("Calibrate...", "function=None unit=[Gray Value] text1=[ ] text2= global show"); 

	myOriginalID = getImageID();
	myImageID = myOriginalID;
	setLocation(10, 80);

	strName=getTitle; 			// original image name, not the scaled image
	// extract DICOM Image data:
	intEnergy = parseInt(getInfo("0018,0060")) / 1000;
	strDateImage = getInfo("0008,0023");
	intSSD = parseInt(getInfo("3002,0022")) / 10;

	// rescale the original image if it is from old imager with only 512 x 384 pixels i.e. LA5/6, but don't over-write original
	pWidth = getWidth();
	pHeight = getHeight();

	    run("Remove Outliers...", "radius=1 threshold=100 which=Bright");	//	Removes dead pixels from image
	
	if (pWidth == 512) {
		run("Scale...", "x=2 y=2 width="+2*pWidth+" height="+2*pHeight+" interpolation=Bilinear average create title=ScaledImage.dcm");
		selectWindow("ScaledImage.dcm");
		myImageID = getImageID(); 	   
		setLocation(15, 100);
	}

	// Initialise the results table, and ROI Manager	
	selectImage(myImageID);  		// make sure its selected
	run("Set Measurements...", "area mean min bounding display redirect=None decimal=3");
	run("Clear Results");
	roiManager("reset");
	print ("\\Clear");

// *************** STEP 2 ***************
// 2. Find the ball bearings (BB) and identify which quadrant they are in so can draw lines between them

	findBB();
	drawBBIntersects();  	// finds x,yNorth, x,ySouth etc.

	//sets intX and intY, used as a starting point to find central minima, hence central point
	findIntersection(xNorth, yNorth, xSouth, ySouth, xEast, yEast, xWest, yWest); 	
	findCentre(xNorth, yNorth, xSouth, ySouth, xEast, yEast, xWest, yWest);

// *************** STEP 3 ***************
// 3. Profile Analysis     

	//Horizontal & Vertical lines through centre, add a few pixels to line so that make sure it covers entire profile

	pxAdd = 150; 		// this is wide enough to ensure get true FWHM

	getFWHM(xCentre, yNorth-pxAdd, xCentre, ySouth+pxAdd); // vertical line through centre
	beamV1 = pos1 + (yNorth-pxAdd);  	// remove the added pixels - position in array is relative
	beamV2 = pos2 + (yNorth-pxAdd);

	getFWHM(xWest-pxAdd, yCentre, xEast+pxAdd, yCentre);
	beamH1 = pos1 + (xWest-pxAdd);				//	H2 and H1 swapped around 23/04/14 due to Y1 & Y2 being incorrectly orientated in results.
	beamH2 = pos2 + (xWest-pxAdd);

	// Calc distances - uses the known fixed distance of BB interesct lines = 10cm
	myCF = calcScaleFactor(xNorth, yNorth, xSouth, ySouth, xWest, yWest, xEast, yEast);

// *************** STEP 4 ***************
// 4. Calc distance between central position and XRay field

	// the Xray field edge is the point along straight or veritcal line running through the central point
	// it does not correct for a phantom set up skewed - this will give wrong results

	dNorthX = myCF * calcDistance(xCentre, beamV1, xCentre, yCentre);
	dSouthX = myCF * calcDistance(xCentre, beamV2, xCentre, yCentre);
	dWestX = myCF * calcDistance(beamH1, yCentre, xCentre, yCentre);
	dEastX = myCF * calcDistance(beamH2, yCentre, xCentre, yCentre);


// *************** STEP 5 ***************
// 5. Tidy the user interface by closing windows not needed

	// close the scaled image - know its scaled if working image ID is not the original image ID
	if (myImageID != myOriginalID){
		selectImage(myImageID);  
		run("Close"); 
	}

	selectWindow("Line Width");
	run("Close"); 

	selectWindow("ROI Manager"); 
	run("Close"); 

	selectWindow("Log"); 
	setLocation(600, 50);


// *************** STEP 6 ***************
// 6. Output the results, prompt to save

	// At Coll 90, North (G) = X2, South (T) = X1, East (B) = Y1, West (A) = Y2

	printHeader();
	print("For Col 90");
            print("   X1     "+d2s(dSouthX, 2)+"cm");
            print("   X2     "+d2s(dNorthX, 2)+"cm");
            print("   Y1     "+d2s(dEastX, 2)+"cm");
            print("   Y2     "+d2s(dWestX, 2)+"cm");

	saveResults();

} // End Macro
// ------------------------------------------------------------------------------------------------------
//		END OF MAIN MACRO
// ------------------------------------------------------------------------------------------------------


// ------------------------------------------------------------------------------------------------------
//		FUNCTIONS USED IN THIS MACRO
// ------------------------------------------------------------------------------------------------------

//*************** findBB ************************************
function findBB() {

	selectImage(myImageID);  

	refAx = 0; 
	refAy = 0; 
	refBx = getWidth();
	refBy = 0;
	refCx = getWidth();
	refCy = getHeight();
	refDx = 0;
	refDy = getHeight();

            isFound = false;
	myThreshold = 25;

	while (isFound == false) {

   	    run("Find Maxima...", "noise="+myThreshold+" output=[Point Selection] exclude");

	    getSelectionCoordinates(xCoordinates, yCoordinates); 

	    if (lengthOf(xCoordinates)== 8) {
	        isFound = true;
	    } // end if

	    myThreshold = myThreshold + 20;
	    if (myThreshold > 1000) {
	        isFound = true; 		// should never get this far, but this is needed to stop a never ending loop!!		
	    }
	} // End While

	selectImage(myImageID);  		// make sure its selected, and on top

	setTool("multipoint");
	waitForUser("Image QC", "Adjust positions of BB if required. \nthen Click OK");
	getSelectionCoordinates(xCoordinates, yCoordinates); 

	if (lengthOf(xCoordinates)> 8) {  	// this stops if the user has added a point by mistake (easily done)
	     exit("More than 8 points were detected, \n Please start the analysis again");
	}

	//next put the 8 points into an array
	xArr = newArray(8);
	yArr = newArray(8);

	for (i=0; i<8; i++){
  	    xArr[i] = xCoordinates[i];
	    yArr[i] = yCoordinates[i];
	}

	// find which quadrant the ball bearings are located, using the rectangle coordinates
	findNearest(refAx, refAy, xArr, yArr);
	pt1 = pos1;
	pt2 = pos2;

	findNearest(refBx, refBy, xArr, yArr);
	pt3 = pos1;
	pt4 = pos2;

	findNearest(refCx, refCy, xArr,yArr);
	pt5 = pos1;
	pt6 = pos2;
	
	findNearest(refDx, refDy, xArr, yArr);
	pt7 = pos1;
	pt8 = pos2;

	// find the intersections of the lines joining the points found
	findIntersection(xArr[pt1], yArr[pt1], xArr[pt2], yArr[pt2], xArr[pt3], yArr[pt3], xArr[pt4], yArr[pt4]);
	xNorth = intX;
	yNorth = intY;

	findIntersection(xArr[pt3], yArr[pt3], xArr[pt4], yArr[pt4], xArr[pt5], yArr[pt5], xArr[pt6], yArr[pt6]);
	xEast = intX;
	yEast = intY;

	findIntersection(xArr[pt5], yArr[pt5], xArr[pt6], yArr[pt6], xArr[pt7], yArr[pt7], xArr[pt8], yArr[pt8]);
	xSouth = intX;
	ySouth = intY;

	findIntersection(xArr[pt7], yArr[pt7], xArr[pt8], yArr[pt8], xArr[pt1], yArr[pt1], xArr[pt2], yArr[pt2]);
	xWest = intX;
	yWest = intY;

} // End of Function findBB


//*************** drawBBIntersects ************************************************************************************
function drawBBIntersects() {
	makeLine(xNorth, yNorth, xEast, yEast);
	run("Line Width...", "line=1");		//reset line size

	roiManager("Add");
	roiManager("Select", 0);
	roiManager("Rename", "LineNE");
	roiManager("Set Color", "red");

	makeLine(xEast, yEast, xSouth, ySouth);
	roiManager("Add");
	roiManager("Select", 1);
	roiManager("Rename", "LineSE");
	roiManager("Set Color", "red");

	makeLine(xSouth, ySouth, xWest, yWest);
	roiManager("Add");
	roiManager("Select", 2);
	roiManager("Rename", "LineSW");
	roiManager("Set Color", "red");

	makeLine(xWest, yWest, xNorth, yNorth);
	roiManager("Add");
	roiManager("Select", 3);
	roiManager("Rename", "LineNW");
	roiManager("Set Color", "red");

} // End of Function drawBBIntersects 

//*************** findIntersection ***************************************************************************************
function findIntersection(xi1, yi1, xi2, yi2, xi3, yi3, xi4, yi4) {
	intX = 0;
	intY = 0;

	// Need to test for divide by zero, as code will fail, giving intersection 0,0

	if ((xi2!=xi1) && (xi3!=xi4)) {  
	    grad1 = (yi2 - yi1)/(xi2 - xi1);
	    grad2 = (yi3 - yi4)/(xi3 - xi4);
	    intX = ((yi3 - yi1) + (xi1 * grad1) - (xi3 * grad2)) /(grad1 - grad2);
	    intY = grad1*(intX - xi1) + yi1;

	}  else if  (xi3==xi4) {
	    // verical, grad2 is infinity		
  	    grad1 = (yi2 - yi1)/(xi2 - xi1);  
  	    intX = xi3;
 	    intY = grad1*(intX - xi1) + yi1;

	}  else if (xi2==xi1) {
	    // vertical line, grad1 is infinity		
	    grad2 = (yi3 - yi4)/(xi3 - xi4);
  	    intX = xi2;
 	    intY = grad2*(intX-xi3) + yi3;
	}

} //End of Function findIntersection 

//*************** getFWHM from a profile line *********************************************
function getFWHM(x1, y1, x2, y2) {
	//to calc FWHM of a profile along line (x1,y1) to (x2,y2) 

	selectImage(myImageID);  		// make sure we still have the correct image

	pos1 = 0;
	pos2 = 0;

	makeLine(x1, y1, x2, y2);
	run("Line Width... ", "line=5");
	//run("Close"); 

	myProfile = getProfile();		

	Array.getStatistics(myProfile,min, max);

	//16383 is (2 to the power 14)  - 1=> number of bits allocated to gray scale 
	// 0 = true black (max dose that EPID can register), and 16384 = white (no dose)
	// The profile is inverted min in ImageJ is our "maximum" and vice versa.  Min and max here are ImageJ

	halfMax = min + (max - min)/2; 	

	startX = 0;
	endX = 0;
	midPt = (myProfile.length)/2;
	for (i=0; i<midPt; i++) {
	    if (myProfile[i]<halfMax && startX==0) 
   	        startX = i -1;  // already passed it so use previous i value
	}

	for (i=midPt; i<myProfile.length; i++) {
	    if (myProfile[i]>halfMax && endX==0)
	        endX = i;
	}

	pos1 = startX;
	pos2 = endX;

} // End of Function

//**************** calcScale ******************************************************************************************
function calcScaleFactor(xN, yN, xS, yS, xW, yW, xE, yE) {

	dist1 = sqrt(pow(xN-xS,2)+pow(yN-yS, 2));
	dist2 = sqrt(pow(xE-xW,2)+pow(yE-yW, 2));
	cF = 20/(dist1+dist2); 	// 10cm is the known dist so average of d1 and d2 divided by 10cm, i.e. 20
            return cF;

}  //End of Function calcScaleFactor

//*************** findNearest ********************************************************************
function findNearest(refX, refY, xArr, yArr) {
	//function to find the positions of the points nearest Ref point

	pos1 = 0;
	pos2 = 0;

	d1 = sqrt(pow(xArr[0]-refX,2)+pow(yArr[0]-refY,2));
	d2 = sqrt(pow(xArr[1]-refX,2)+pow(yArr[1]-refY,2));
	d3 = sqrt(pow(xArr[2]-refX,2)+pow(yArr[2]-refY,2));
	d4 = sqrt(pow(xArr[3]-refX,2)+pow(yArr[3]-refY,2));
	d5 = sqrt(pow(xArr[4]-refX,2)+pow(yArr[4]-refY,2));
	d6 = sqrt(pow(xArr[5]-refX,2)+pow(yArr[5]-refY,2));
	d7 = sqrt(pow(xArr[6]-refX,2)+pow(yArr[6]-refY,2));
	d8 = sqrt(pow(xArr[7]-refX,2)+pow(yArr[7]-refY,2));

	dArr = newArray(d1,d2,d3,d4,d5,d6,d7,d8);

	sortedA = Array.copy(dArr);
	Array.sort(sortedA);
	rankPosArr = Array.rankPositions(dArr);
	pos1 = rankPosArr[0];
	pos2 = rankPosArr[1];
       
} // End of Function findNearest


//*************** findDistance ****************************************************************
function calcDistance(a, b, c, d) {

	// calc distance in pixels between two coordinates A and B
	myDist = sqrt(pow(a-c,2)+pow(b-d,2));
	return myDist;

} // End of Function calcDistance


//********************** Find central point ********************************************************
function findCentre(xi1, yi1, xi2, yi2, xi3, yi3, xi4, yi4) {

   // find the central point, using the intersection of the 4 points: N,S,E,W (light field)

   //take average of coords to give approx location of central bb to start search

	intX = (xi1+xi2+xi3+xi4)/4;
	intY = (yi1+yi2+yi3+yi4)/4;

	selectImage(myImageID);  		// make sure its the correct image
            isFound = false;
	myThreshold = 5;

	while (isFound == false) {
	    makeOval(intX-25, intY-25, 50, 50);  	//makeOval(x, y, width, height), x,y are upper left corner
   	    run("Find Maxima...", "noise="+myThreshold+" output=[Point Selection] exclude light");
	    getSelectionCoordinates(xCoordinates, yCoordinates); 

	    if (lengthOf(xCoordinates)==1) {
	        isFound = true;
	    } // end if

	    myThreshold = myThreshold + 5;
	    if (myThreshold > 1000) {
	        isFound = true;  // should never get this far, but this is needed to stop a never ending loop!!		
	    }
 
	} // end While loop

	selectImage(myImageID);  		// put the image on top
	setTool("multipoint"); 		// select pointer
	//waitForUser("Image QC", "Adjust central marker if required, then Click OK");
	getSelectionCoordinates(xCoordinates, yCoordinates);

	if (lengthOf(xCoordinates)>1) {
	        exit("More than one central position selected by user, please restart the analysis.");
	} // end if

	roiManager("Add");
	roiManager("Select", 4);
	roiManager("Rename", "CentrePt");

	xCentre = xCoordinates[0] + 2; 	// cental position always 1 pixel out > 2 pixels on rescale - EPID 'feature'
	yCentre = yCoordinates[0] + 1;	// Y is on, but as we have rescaled, need to adjust 0.5 pxel on original scale

} // End Function

// ***************************** FUNCTION PRINT HEADER ************************************
function printHeader(){

	strDate = getMyDate();

	print ("\\Clear");
	print("--------------------------------------------------------");
	print("  Congruence Image Analysis using EPID");
	print("--------------------------------------------------------");
            print("Image Analysed: "+strName);
	print("Image Date: "+strDateImage);
	print("Analysis Date: "+strDate);
	print("Linac: "+myLinac);
	print("Energy: "+intEnergy+"MV");
	print("SSD: "+intSSD+"cm");
	print("\n");	

}  // End Function

// ************************ FUNCTION SAVE RESULTS *******************************************
function saveResults(){

	// Add Comments & Save Results	

	Dialog.create("Comments");							// Allows user to insert comments if required. Default is "Results OK" These are then added to Log
	Dialog.addMessage("Add any Comments in the Box Below");
	Dialog.addString("Comments:", "None",40);
	Dialog.addMessage("");
	Dialog.addString("Analysis Performed by:", "",10);
	Dialog.addMessage("Click OK to Continue");
	Dialog.show();

	print("\n");
	print("Comments:"+Dialog.getString());
	print("Analysis Performed by:" + Dialog.getString());
	print("\n");
	print("--------------------------------------------------------");
	
	Dialog.create("~~ Save Results ~~");		// Asks user if they want to save results (as a text file). If they select cancel, the macro wil exit, therefore the save will not occur.
	Dialog.addMessage("  Save the Results?      ");
	Dialog.show();
	setLocation(100, 200);

	selectWindow("Log");				// Get data from log window for transfer to Text window to save
	contents = getInfo();

	FileExt = ".txt";
	title1 = strDateImage+"-"+myLinac+"-"+intEnergy+"-CongResults" + FileExt+ FileExt;	//	Title of log window is filename without extension as defined at start.
	title2 = "["+title1+"]";				
	f = title2;
	if (isOpen(title1)) {
		print(f, "\\Update:");
		selectWindow(title1); 			// clears the window if already one opened with same name
	} else {
		run("Text Window...", "name="+title2+" width=72 height=60");
	}
	setLocation(screenWidth() -100,screenHeight()-100);	// Puts window out of sight
	print(f,contents);
	saveAs("Text");
	run("Close");	

} // End of Function


//************************* FUNCTION getMyDate **************************************************
function getMyDate() {

	arrMonth = newArray("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec");
	getDateAndTime(year, month, dayOfWeek, dayOfMonth, hour, minute, second, msec);
	strDate = ""+dayOfMonth+"-"+arrMonth[month]+"-"+year;
	return strDate;

  } // End Function

