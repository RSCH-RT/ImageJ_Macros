// 	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -	//
//		PAPILLON FIELD SIZE & UNIFORMITY by Matt Bolt at Royal Surrey County Hospital April 2015		//
// 	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -	//
//	Macro will measure field size as defined by threshold set by user from 50% image				//
//	Uniformity also measured at distance form centre specified by user						//
//	Image should be TIFF with 3 seperate colour channels showing when opened					//


var intX		//	Global Variables need to be specified outside of the macro for use in functions
var intY
var mean
var centreX
var centreY
var cetre50x
var centre50y
var centre100x
var centre100y
var N100x
var N100y
var S100x
var S100y
var E100x
var E100y
var W100x
var W100y
var myDist

//========================================================================================
//========================================================================================

macro "Papillon_Field_Analysis"{

///////	0	//////////	Setup ImageJ as required & get image info	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	requires("1.47p");
	run("Profile Plot Options...", "width=450 height=300 interpolate draw sub-pixel");
	run("Set Measurements...", "area mean standard min centroid center bounding display redirect=None decimal=3");

	Dialog.create("Macro Opened");
	Dialog.addMessage("--------- Papillon Field Analysis ---------");
		if(nImages==0) {
		Dialog.addMessage("You will be prompted to open the required image after clicking OK");
		}
	Dialog.addMessage("Click OK to start");
	Dialog.addMessage("Macro Designed for 2015 Audit by M. Bolt, RSCH");
	Dialog.show()

//**********************************  Default Values for Constants ***********************************************
//********************************************************************************************************************

	LineDistFromCentremm = 30;							//	distance of lines drawn. Must be long enough to cross field edge
	ProfileWidthmm = 2;								//	Sets the width of the measured profile in mm - aim is to average over a wider profile to avoid problems with any noise/dust/dead pixels in image
	
	roiSizeDef = 3;				// to be chosen by user**************		//	set ROI size in mm
	UniMeasDistDef = 7;			// to be chosen by user**************		//	Distance of uniformity ROIs from centre in mm
	ImageWidthmmDef = 215.9;			// to be chosen by user**************		//	known regular scanner image width in mm (from scanner settings)
						// square pixels assumed = only need width 	//	A4 is 215.9 x 297.2mm,  A3 is 309.9x436.9mm

	myDirectory = "C:\\Users\\MBolt01\\Desktop";	// to be chosen by user**********		//	Set this as your required default directory for ease.


//**********************************  Default Values for Constants ***********************************************
//********************************************************************************************************************

//********** Get image details & Tidy up Exisiting Windows

	call("ij.io.OpenDialog.setDefaultDirectory", myDirectory);					//	note you must use a double '\\' between levels.
	call("ij.plugin.frame.Editor.setDefaultDirectory", myDirectory);				//	These set default directory for when opening file as set above.
	
	if (nImages ==0) {
		path = File.openDialog("Select a File");
		open(path);
	}

	origImageID = getImageID();

	print("\\Clear");									//	Clears any results in log
	run("Clear Results");
	run("Select None");
	roiManager("reset");
	roiManager("Show All");
	run("Line Width...", "line=1");								//	set line thickness to 1 pixel before starting

	myFileName = getInfo("image.filename");						//	gets filename & imageID for referencing in code
	myImageID = getImageID();
	selectImage(myImageID);
	name = getTitle;									//	gets image title and removes file extension for saving purposes
	dotIndex = indexOf(name, ".");
	SaveName = substring(name, 0, dotIndex);
	run("Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");

	MonthNames = newArray("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec");		//	get current date and display in desired format
	DayNames = newArray("Sun", "Mon","Tue","Wed","Thu","Fri","Sat");
	getDateAndTime(year, month, dayOfWeek, dayOfMonth, hour, minute, second, msec);
	TimeString = ""+dayOfMonth+"-"+MonthNames[month]+"-"+year;

	ImageWidthPx = getWidth();							//	returns image width in pixels

 //  ********** Start main part of user interaction. Get irradiation details and set constants

	Dialog.create("Enter Details");
	Dialog.addString("Centre Details:","Centre ID etc",50);
	Dialog.addString("Irradiation Details:","Applicator Size/Dose/etc",50);
	Dialog.addMessage("- - - - - - - - - - - - - - - - - - - -");
	Dialog.addNumber("ROI Size", roiSizeDef, 1,10,"mm");
	Dialog.addNumber("ROI dist from centre", UniMeasDistDef,1,10,"mm");
	Dialog.addNumber("Image Width", ImageWidthmmDef,1,10,"mm");
	Dialog.show()

	centredetails = Dialog.getString();
	irradiationdetails = Dialog.getString();
	roiSize = Dialog.getNumber();
	UniMeasDist = Dialog.getNumber();
	ImageWidthmm = Dialog.getNumber();

	scale = ImageWidthPx/ImageWidthmm;	// calculate scaling factor in mm per pixel. So size in pixels can be calculated by doing size in mm * scale
	roiSizePx = roiSize*scale;
	UniMeasDistPx = UniMeasDist*scale;
	LineDistFromCentrePx = LineDistFromCentremm*scale;

	setTool("zoom");									//	Set tool to magnify, for user to zoom in before starting
	waitForUser("Zoom", "Click on image to magnify\n \nClick OK when complete");

//*********** find centre of irradiation by fitting circles to 3 points placed by user

	CircleCentreROI(roiSizePx,roiSizePx,"Centre ROI 50%","Red","Select 3 points around 50% exposure edge.\n \nEnsure that RED channel is selected using scroll bar at bottom of image\n \nClick OK when complete");
		circle50mean = mean;
		centre50x = centreX;
		centre50y = centreY;

	CircleCentreROI(roiSizePx,roiSizePx,"Centre ROI 100%","Red","Select 3 points around 100% exposure edge.\n \nEnsure that RED channel is selected using scroll bar at bottom of image\n \nClick OK when complete");
		circle100mean = mean;
		centre100x = centreX;
		centre100y = centreY;

//*********** draw lines vertically and horizontally form centre and find edges along these

	Line(centre100x,centre100y-LineDistFromCentrePx,centre100x,centre100y+LineDistFromCentrePx, "LineNS", "yellow");
	Line(centre100x-LineDistFromCentrePx,centre100y,centre100x+LineDistFromCentrePx,centre100y, "LineWE", "yellow");

	FindEdges(centre100x,centre100y-LineDistFromCentrePx,centre100x,centre100y+LineDistFromCentrePx,0,0, ProfileWidthmm/scale,circle50mean,"Edge North","Edge South",0,0);
	FindEdges(centre100x-LineDistFromCentrePx,centre100y,centre100x+LineDistFromCentrePx,centre100y,0,0, ProfileWidthmm/scale,circle50mean,"Edge West","Edge East",0,0);

	roiManager("Select", roiManager("count") - 4);			//	measure coords of field edges after any possible movement
		run("Measure");
	roiManager("Select", roiManager("count") - 3);
		run("Measure");
	roiManager("Select", roiManager("count") - 2);
		run("Measure");
	roiManager("Select", roiManager("count") - 1);
		run("Measure");

	edgeNX = getResult("X", nResults - 4);				//	get coords of each edge point from the results window
	edgeNY = getResult("Y", nResults - 4);
	edgeSX = getResult("X", nResults - 3);
	edgeSY = getResult("Y", nResults - 3);
	edgeEX = getResult("X", nResults - 2);
	edgeEY = getResult("Y", nResults - 2);
	edgeWX = getResult("X", nResults - 1);
	edgeWY = getResult("Y", nResults - 1);

	NSdist = calcDistance(edgeNX,edgeNY,edgeSX,edgeSY);		//	convert distances in Px into mm for output
	NSdistmm = NSdist/scale;
	WEdist = calcDistance(edgeWX,edgeWY,edgeEX,edgeEY);
	WEdistmm = WEdist/scale;

//*********** add background ROIs

	setTool("multipoint");											//	Set tool to multipoint, for user to select points
	waitForUser("Background Selection", "Select 3 Background points on 100% film \n \nSelect OK When complete");		//	Select 2 background points and create ROI

	run("Measure");

	arrX = newArray(3);						//	create array with 3 selected points
	arrY = newArray(3);
	for (i=0; i<3;i++) {						//	Get coords of 3 Selected Points and place into Array
		arrX[i] = getResult("X",nResults-1-i);			//	this will look at the 3 laast points selected.
		arrY[i] = getResult("Y",nResults-1-i);			//	if user selects more than 3 points, the first ones will be ignored.
	}

	bg1x = arrX[2];						//	get background point coordinates
	bg1y = arrY[2];
	bg2x = arrX[1];
	bg2y = arrY[1];
	bg3x = arrX[0];
	bg3y = arrY[0];

	RectROI(bg1x-roiSizePx/2, bg1y-roiSizePx/2, roiSizePx, roiSizePx, "BG 1", "Blue");		//	Create 3 BG ROIs
	RectROI(bg2x-roiSizePx/2, bg2y-roiSizePx/2, roiSizePx, roiSizePx, "BG 2", "Blue");
	RectROI(bg3x-roiSizePx/2, bg3y-roiSizePx/2, roiSizePx, roiSizePx, "BG 3", "Blue");

	roiManager("Select", roiManager("count") - 3);
	waitForUser("Background ROI Position", "Check position of Background ROIs\n \nPress OK  when ROIs are correctly positioned");
	setTool("Hand");	

	roiManager("Select", roiManager("count") - 3);
	run("Measure");
	roiManager("Select", roiManager("count") - 2);
	run("Measure");
	roiManager("Select", roiManager("count") - 1);
	run("Measure");

	bg1mean = getResult("Mean",nResults - 3);						//	Get mean results
	bg2mean = getResult("Mean",nResults - 2);
	bg3mean = getResult("Mean",nResults - 1);

	bgmean = (bg1mean+bg2mean+bg3mean)/3;						//	Mean of background points.

//*********** add uniformity ROIs

	RectROI(centre100x-roiSizePx/2, centre100y-roiSizePx/2-UniMeasDistPx, roiSizePx, roiSizePx, "Uni North", "Green");	//	Create Uniformity ROIs
	run("Measure");
	RectROI(centre100x-roiSizePx/2, centre100y-roiSizePx/2+UniMeasDistPx, roiSizePx, roiSizePx, "Uni South", "Green");	//	Create Uniformity ROIs
	run("Measure");
	RectROI(centre100x-roiSizePx/2-UniMeasDistPx, centre100y-roiSizePx/2, roiSizePx, roiSizePx, "Uni West", "Green");	//	Create Uniformity ROIs
	run("Measure");
	RectROI(centre100x-roiSizePx/2+UniMeasDistPx, centre100y-roiSizePx/2, roiSizePx, roiSizePx, "Uni East", "Green");	//	Create Uniformity ROIs
	run("Measure");

	uniNmean = getResult("Mean",nResults - 4);
	uniSmean = getResult("Mean",nResults - 3);
	uniWmean = getResult("Mean",nResults - 2);
	uniEmean = getResult("Mean",nResults - 1);

//*********** Calculate Uniformity ratios after background correction

	CORRmeanC = abs(circle100mean - bgmean);		//	correct ROIs for background
	CORRmeanN = abs(uniNmean - bgmean);
	CORRmeanS = abs(uniSmean - bgmean);
	CORRmeanW = abs(uniWmean - bgmean);
	CORRmeanE = abs(uniEmean - bgmean);

	ratioN = CORRmeanN/CORRmeanC;
	ratioS = CORRmeanS/CORRmeanC;
	ratioW = CORRmeanW/CORRmeanC;
	ratioE = CORRmeanE/CORRmeanC;

	Dialog.create("Comments");							//	Allows user to insert comments if required. Default is "Results OK" These are then added to Log
	Dialog.addMessage("Add any Comments in the Box Below");
	Dialog.addString("Comments:", "(None)",40);
	Dialog.addMessage("");
	Dialog.addString("Analysis Performed by:", "",10);
	Dialog.addMessage("Click OK to Continue");
	Dialog.show();

	commentstring = Dialog.getString();
	userstring = Dialog.getString();

//********** print desired results to log - prompt to save and/or repeat

	print("Analysis Date: \t" + TimeString);
	print("File Name: \t" + myFileName);
	print("\n");
	print("Centre Details: \t" + centredetails);
	print("Irradiation Details: \t" + irradiationdetails);
	print("\n");
	print("NS dist (mm): \t" + NSdistmm);
	print("WE dist (mm): \t" + WEdistmm);
	print("\n");
	print("ratio N: \t" + ratioN);
	print("ratio S: \t" + ratioS);
	print("ratio W: \t" + ratioW);
	print("ratio E: \t" + ratioE);
	print("\n");
	print("Comments: \t" + commentstring);
	print("User: \t" + userstring);

	selectWindow("Log");						//	Make window easily visible for user
	setLocation(0,0);

//********** Save Results as .txt file

	Dialog.create("Save");						//	Asks user if they want to save results (as a text file). If they select cancel, the macro wil exit, therefore the save will not occur.
	Dialog.addMessage("Save the Results?");
	Dialog.show();

	selectWindow("Log");						//	Get data from log window for transfer to Text window to save
	contents = getInfo();

	FileExt = ".txt";
	title1 = SaveName + "_Results" + FileExt;				//	Title of log window is filename without extension as defined at start.
	title2 = "["+title1+"]";						//	Repeat
	f = title2;
	if (isOpen(title1)) {
		print(f, "\\Update:");
		selectWindow(title1); 					//	clears the window if already one opened with same name
	} else {
		run("Text Window...", "name="+title2+" width=72 height=60");
	}
	setLocation(screenWidth(),screenHeight());				//	Puts window out of sight
	print(f,contents);
	saveAs("Text");
	run("Close");		
	}

}	// end of macro. Below this is functions called form within the macro.



//========================================================================================
//========================================================================================



// ----------------------------------- MAKE CIRCLE CENTRE ROI FUNCTION -------------------------------------------------------------------------
function CircleCentreROI(width, height, name, colour,message) {

	resultsstart = nResults;							//	used to count the number of resutls so that can check if 3 points have been selected for circle fitting.

	setTool("multipoint");
	waitForUser("Mark Circle Edge", message);						//	user selects (3) points around the circle edge

	run("Measure");
		selectWindow("Results");							//	moves results window out of view
		setLocation(screenWidth()*0.95,screenHeight()*0.95);

	resultsend = nResults;

	while(resultsend-resultsstart != 3) {
		resultsstart = nResults;
			setTool("multipoint");						//	3 points only should be selected to fit circle
			waitForUser(message);
			run("Measure");
		resultsend = nResults;
		}

	run("Fit Circle");
//	waitForUser("Circular field marked correctly? Adjust position if necessary.");		//	could remove this as centre of 50% is not critical.

	run("Measure");								//	get circle centre coordinates
		centreX = getResult("XM",nResults - 1);
		centreY = getResult("YM",nResults - 1);

	RectROI(centreX-(width/2),centreY-(height/2),width,height, name, colour);		//	plot central ROI

	run("Measure");								//	get 50% mean from ROI
		mean = getResult("Mean",nResults - 1);
}


// ----------------------------------- MAKE RECTANGLE ROI FUNCTION -------------------------------------------------------------------------
function RectROI(x, y, width, height, name, colour) {
 
	makeRectangle(x, y, width, height);				//	make rectangle ROI at specified location with specified name and colour
	roiManager("Add");
	roiManager("Select",roiManager("count")-1);
	roiManager("Rename", name);
	roiManager("Set Color", colour);
}


// ----------------------------------- MAKE POINT FUNCTION (This is used when defining the field edges) -------------------------------------------------------------------------
function Point(x, y, name) {

	makePoint(x,y);						//	plot point with given coord and rename
	roiManager("Add");
	roiManager("Select", roiManager("count")-1);
	roiManager("Rename", name);
}


// ----------------------------------- FIND EDGE FUNCTION -------------------------------------------------------------------------
function FindEdges(x1,y1,x2,y2,xC,yC, width,thres,name1,name2, offset1,offset2) {		//	pts 1 & 2 are the ends fo the line, point C is the centre point at which analysis should start
										//	offset allows the i+n'th value to be returned. Set as 0 if none required
										//	width is profile width, thres is edge threshold, name is the name of the edge points 1 & 2 created
	run("Line Width...", "line=" + width);				//	Set profile measurement width

	if(xC == 0 && yC == 0) {					//	If there is no central point defined (Set as zero in function) then it is created to be midway between the 2 points.
		xC = (x1+x2)/2;
		yC = (y1+y2)/2;
	}

	Dist12 = calcDistance(x1,y1,x2,y2);				//	detemines start point in measured profile (i.e. distance centre point is along profile)
	Dist1C = calcDistance(x1,y1,xC,yC);
	ProfStart = Dist1C / Dist12;

	DoubleLine(x1,y1,xC,yC,x2,y2,"Line1");			//	need 3 points along line to run the fit

	run("Fit Spline", "straighten");				//	fit a 'curve' which allows to get profile along this curve and extract coords
	getSelectionCoordinates(x,y);

	profileA = getProfile();					//	get profile values

	endPt = profileA.length;					//	end point of profile (anbd analysis values) is final value in profile
	midPt = endPt * ProfStart;					//	mid point is ratio of total distance
	startPt = 0;						//	start at beginning of profile

     //******* Find Point 1

	i = midPt;
	while (i>startPt && profileA[i] < thres) {			//	start at chosen point (centre) and check all points until one passes thres.
		i = i-1;
	}

	edge1x = x[i+offset1];					//	set the coords of this point as new point
	edge1y = y[i+offset1];

	Point(edge1x, edge1y, name1);				//	use function to create new point
	
     //******* Find Point 2

	i = midPt;
	while (i<endPt && profileA[i] < thres) {
		i = i+1;
	}

	edge2x = x[i+offset2];
	edge2y = y[i+offset2];

	Point(edge2x, edge2y, name2);

	roiManager("Select", roiManager("count")-3);			//	delete line created for profile after its been used
	roiManager("Delete");

	run("Line Width...", "line=1");					//	set line width back to 1 pixel

}


//---------------------- Calculate Distance Between Points -------------------------------------------------------------------------------------------
function calcDistance(a, b, c, d) {

	myDist = sqrt(pow(a-c,2) + pow(b-d,2));			//	calc distance between two coordinates A and B, A = (a,b) B = (c,d)
	return myDist;
       
	}


// ----------------------------------- MAKE LINE FUNCTION -------------------------------------------------------------------------
function Line(x1,y1,x2,y2, name, colour) {

	makeLine(x1,y1, x2, y2);					//	Make line between specified poitns with specified name and colour
	roiManager("Add");
	roiManager("Select",roiManager("count")-1);
	roiManager("Rename", name);
	roiManager("Set Color", colour);
}


// ----------------------------------- MAKE DOUBLE LINE FUNCTION (This is used when defining the field edges) -------------------------------------------------------------------------
function DoubleLine(x1, y1, x2, y2, x3, y3, name) {

	makeLine(x1, y1, x2, y2, x3, y3);				//	draw line from pt 1, through mid to pt 2 (need 3 points for simple extraction of coords below)
	roiManager("Add");
	roiManager("Select", roiManager("count")-1);
	roiManager("Rename", name);
}
